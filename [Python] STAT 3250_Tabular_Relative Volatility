import numpy as np
import pandas as pd
import glob

filelist = glob.glob('/Users/mac/Desktop/UVA/2018-2019/STAT 3250/Stocks/*.csv') # 'glob.glob' is the directory search
filelist

# Read in all the csv files concatenated in one dataset
data = pd.DataFrame()
for f in filelist:
    newdf = pd.read_csv(f)
    data = pd.concat([data,newdf])

# 1.
np.mean(data['Open'])
np.mean(data['High'])
np.mean(data['Low'])
np.mean(data['Close'])

"""
50.86385220906213
51.459411725747884
50.25336771426483
50.25336771426483
"""


# 2.
# holder for stocklist
stocks = pd.DataFrame()
for f in filelist:
    name = f.split('/')[-1].strip('.csv')   # get the names with csv stripped
    newdf = pd.read_csv(f)
    stock = pd.DataFrame(np.repeat(name, len(newdf)))   # repeat the name by the length of the dataframe
    stocks = pd.concat([stocks, stock]) # concatenate

# Make a column for the stock names
data['Stock'] = stocks

# group close by stock and get top 5
data['Close'].groupby(data['Stock']).mean().sort_values(ascending=False)[0:5]
"""
Stock
CME     253.956017
AZO     235.951950
AMZN    185.140534
BLK     164.069088
GS      139.146781
"""

# bottom 5
data['Close'].groupby(data['Stock']).mean().sort_values()[0:5]
"""
Stock
FTR      8.969515
F       11.174158
XRX     11.291864
ETFC    12.808103
HBAN    13.697483
"""

# 3.

df3 = pd.DataFrame()
df3['Stock'] = data['Stock']
# Volatility
df3['Volatility'] = data['High'] - data['Low']

# Top 5
df3.groupby('Stock').mean().sort_values(by='Volatility', ascending=False)[0:5]
"""
       Volatility
Stock            
CME      7.697287
AMZN     4.691407
BLK      4.470693
AZO      4.330294
ICE      4.056189
"""

# Bottom 5
df3.groupby('Stock').mean().sort_values(by='Volatility')[0:5]
"""
       Volatility
Stock            
FTR      0.205275
XRX      0.308743
F        0.323567
HBAN     0.343893
NI       0.363250
"""

# 4.

df4 = pd.DataFrame()
df4['Stock'] = data['Stock']

# Relative Volatility
df4['Relative Volatility'] = ((data['High'] - data['Low']) / (0.5*(data['Open']+data['Close'])))

# Top 5
df4.groupby('Stock').mean().sort_values(by='Relative Volatility', ascending=False)[0:5]
"""
       Relative Volatility
Stock                     
AAL               0.055533
LVLT              0.054870
EQIX              0.051295
REGN              0.048172
ETFC              0.045381
"""

# Bottom 5
df4.groupby('Stock').mean().sort_values(by='Relative Volatility')[0:5]
"""
       Relative Volatility
Stock                     
GIS               0.013966
PG                0.014192
K                 0.014992
CL                0.015521
WEC               0.015761
"""

# 5.

# October 2008
data['Date'] = pd.to_datetime(data['Date'])
data0810 = data[(data['Date'].dt.year == 2008) & (data['Date'].dt.month == 10)]

# Print all columns
pd.set_option('display.max_columns', None)

# Groupby date and get the mean
data0810[['Open','High','Low','Close','Volume']].groupby(data0810['Date']).mean()

"""
                 Open       High        Low      Close        Volume
Date                                                                
2008-10-01  43.147874  44.089999  41.845493  43.095090  7.319004e+06
2008-10-02  43.033478  43.443991  40.642233  41.126958  9.555247e+06
2008-10-03  41.555534  42.923984  39.882176  40.264390  9.184641e+06
2008-10-06  39.408827  40.564248  36.730878  39.176739  1.176339e+07
2008-10-07  39.427268  40.293947  36.644575  36.933873  1.091851e+07
2008-10-08  36.106591  38.785221  35.062443  36.676517  1.378626e+07
2008-10-09  37.250109  38.002160  33.437178  33.848607  1.281094e+07
2008-10-10  32.581401  35.952582  30.432287  33.992102  1.820152e+07
2008-10-13  35.486543  38.041322  34.122389  37.548197  1.148344e+07
2008-10-14  38.581369  39.626962  35.513443  36.784888  1.240928e+07
2008-10-15  36.149596  36.757105  32.879340  33.197032  1.051697e+07
2008-10-16  33.485713  35.096629  31.415127  34.599193  1.258398e+07
2008-10-17  33.735344  36.184362  32.729962  34.400653  9.973754e+06
2008-10-20  34.989340  36.357728  33.968497  35.909339  7.657442e+06
2008-10-21  35.390477  36.344741  34.189521  34.665477  7.599813e+06
2008-10-22  33.751940  34.344688  31.386153  32.373295  9.425614e+06
2008-10-23  32.889517  33.987036  30.561443  32.516369  1.189890e+07
2008-10-24  30.046028  32.498308  29.403749  31.395146  9.726575e+06
2008-10-27  30.638140  31.924868  29.501411  29.877173  8.362392e+06
2008-10-28  30.860222  33.145389  29.345018  32.955575  1.091700e+07
2008-10-29  32.864871  34.887581  31.854395  33.179376  1.036944e+07
2008-10-30  34.273941  35.292079  32.884269  34.284817  8.928569e+06
2008-10-31  33.995771  35.761028  33.294631  34.976910  9.213693e+06
"""

# 6.
df4['Date'] = data['Date']

# 2011
data11 = df4[(df4['Date'].dt.year == 2011)]

# Groupby date and get the mean
df6 = data11.groupby(['Date']).mean()

# Print date with maximum relative volatility
df6[df6['Relative Volatility'] == df6['Relative Volatility'].max()]
"""
            Relative Volatility
Date                           
2011-08-08             0.073087
"""

# Print date with minimum relative volatility
df6[df6['Relative Volatility'] == df6['Relative Volatility'].min()]
"""
            Relative Volatility
Date                           
2011-12-30             0.014162
"""

# 7.

# 2010 - 2012
data1012 = df4[(df4['Date'].dt.year >= 2010) & (df4['Date'].dt.year <= 2012)].reset_index()
# Make day column
data1012['Day'] = data1012['Date'].dt.dayofweek
# Group relative voliatility by day and get the mean
data1012['Relative Volatility'].groupby(data1012['Day']).mean()
"""
Day
0    0.022109
1    0.023836
2    0.023443
3    0.024865
4    0.023018
"""

# 8.
# 2009
data09 = df4[(df4['Date'].dt.year == 2009)]
# Create Month column
data09['Month'] = data09['Date'].dt.month

# Average relative volatility by month and stock
data09 = data09['Relative Volatility'].groupby([data09['Month'],data09['Stock']]).mean().reset_index()

# Stock with Maximum relative volatility for each month
data09[data09.groupby('Month')['Relative Volatility'].transform(max) == data09['Relative Volatility']]

"""
      Month Stock  Relative Volatility
105       1   GGP             0.190686
392       2  HBAN             0.275587
658       3   GGP             0.241744
935       4   GGP             0.212291
1212      5   GGP             0.187383
1489      6   GGP             0.131522
1671      7   AIG             0.121527
1948      8   AIG             0.141233
2320      9   GGP             0.103328
2493     10   AAL             0.071610
2875     11   GGP             0.089010
3153     12   GGP             0.112847
"""

# 9.
# 2013 January
data1301 = data[(data['Date'].dt.year == 2013) & (data['Date'].dt.month == 1)]
# Day column
data1301['Day'] = data1301['Date'].dt.day

# SVs
data1301['OpenSV'] = data1301['Open']*data1301['Volume']
data1301['HighSV'] = data1301['High']*data1301['Volume']
data1301['LowSV'] = data1301['Low']*data1301['Volume']
data1301['CloseSV'] = data1301['Close']*data1301['Volume']

# Sum SVs by day
SV = data1301[['OpenSV','HighSV','LowSV','CloseSV']].groupby(data1301['Day']).sum()

# Sum Volume by day
V = data1301['Volume'].groupby(data1301['Day']).sum()

# Divide sums of SVs by sums of volumes for each day
SV.div(V, axis=0)

"""
        OpenSV     HighSV      LowSV    CloseSV
Day                                            
2    37.218240  37.669825  36.804244  37.394700
3    36.683928  37.175883  36.309854  36.730561
4    37.735301  38.197961  37.471489  37.969676
7    39.433973  39.952425  39.087880  39.596959
8    39.403554  39.748143  38.922081  39.354890
9    35.033924  35.411876  34.651302  35.014333
10   37.137210  37.527043  36.757483  37.295754
11   37.932903  38.256677  37.579063  37.991448
14   38.348330  38.759699  37.980530  38.388938
15   38.323527  38.880771  38.003460  38.487561
16   39.353471  39.731879  38.887220  39.347620
17   35.884004  36.233690  35.551895  35.877188
18   40.277388  40.652477  39.865453  40.376961
22   40.567323  41.068261  40.241281  40.851074
23   44.417554  45.121563  44.065735  44.770209
24   48.814446  49.728573  48.237470  49.174833
25   58.340138  62.089706  58.052795  61.453043
28   50.844625  51.450083  49.590466  50.007070
29   41.631649  42.499318  41.221507  42.174208
30   45.212780  45.587135  44.354852  44.792994
31   44.310451  45.061372  43.789490  44.518366
"""

# 10.

# 2007 - 2012
data0712= data[(data['Date'].dt.year >= 2007) & (data['Date'].dt.year <= 2012)]

# SVs
data0712['OpenSV'] = data0712['Open']*data0712['Volume']
data0712['HighSV'] = data0712['High']*data0712['Volume']
data0712['LowSV'] = data0712['Low']*data0712['Volume']
data0712['CloseSV'] = data0712['Close']*data0712['Volume']

# Sum SVs by date
SV = data0712[['OpenSV','HighSV','LowSV','CloseSV']].groupby(data0712['Date']).sum()

# Sum Volume by date
V = data0712['Volume'].groupby(data0712['Date']).sum()

# Divide sums of SVs by sums of volumes for each day
df10 = SV.div(V, axis=0).reset_index()

# Relative Volatility
df10['Relative Volatility'] = ((df10['HighSV'] - df10['LowSV']) / (0.5*(df10['OpenSV']+df10['CloseSV'])))

# Month and Year Columns
df10['Month'] = df10['Date'].dt.month
df10['Year'] = df10['Date'].dt.year

# Average relative volatility for each month and year
df10 = df10['Relative Volatility'].groupby([df10['Month'],df10['Year']]).mean().reset_index()

# Top 5
df10.sort_values(by='Relative Volatility', ascending=False)[0:5]

"""
    Month  Year  Relative Volatility
55     10  2008             0.100923
61     11  2008             0.081326
49      9  2008             0.067881
14      3  2009             0.066229
67     12  2008             0.062545
"""
Â© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
